#!/bin/sh

command -v getarg >/dev/null || . /lib/dracut-lib.sh
command -v getargbool >/dev/null || {
    # Compatibility with older Dracut versions.
    # With apologies to the Dracut developers.
    getargbool() {
        if ! [ -z "$_b" ]; then
                unset _b
        fi
        _default="$1"; shift
        _b=$(getarg "$@")
        [ $? -ne 0 ] &&  [ -z "$_b" ] && _b="$_default"
        if [ -n "$_b" ]; then
            [ "$_b" = "0" ] && return 1
            [ "$_b" = "no" ] && return 1
            [ "$_b" = "off" ] && return 1
        fi
        return 0
    }
}

OLDIFS="${IFS}"
NEWLINE="
"

ZPOOL_IMPORT_OPTS=""
if getargbool 0 zfs_force -y zfs.force -y zfsforce ; then
    warn "ZFS: Will force-import pools if necessary."
    ZPOOL_IMPORT_OPTS="${ZPOOL_IMPORT_OPTS} -f"
fi

# find_bootfs
#   returns the first dataset with the bootfs attribute.
find_bootfs() {
    IFS="${NEWLINE}"
    for dataset in $(zpool list -H -o bootfs); do
        case "${dataset}" in
            "" | "-")
                continue
                ;;
            "no pools available")
                IFS="${OLDIFS}"
                return 1
                ;;
            *)
                IFS="${OLDIFS}"
                echo "${dataset}"
                return 0
                ;;
        esac
    done

    IFS="${OLDIFS}"
    return 1
}

# import_pool POOL
#   imports the given zfs pool if it isn't imported already.
import_pool() {
        pool="${1}"

    if ! zpool list -H "${pool}" > /dev/null 2>&1; then
        info "ZFS: Importing pool ${pool}..."
        if ! zpool import -N ${ZPOOL_IMPORT_OPTS} "${pool}" ; then
            warn "ZFS: Unable to import pool ${pool}"
            return 1
        fi
    fi

    return 0
}

# mount_dataset DATASET
#   mounts the given zfs dataset.
mount_dataset() {
    dataset="${1}"
    mountpoint="$(zfs get -H -o value mountpoint "${dataset}")"
    local keystatus="$(zfs get -H -o value keystatus "${dataset}")"
    local encroot
    local pphrase
    local line

    # Ensure encrypted datasets are available
    if [ "${keystatus}" = "unavailable" ] ; then
        pphrase=$(systemd-ask-password "Passphrase for '${dataset}':")
        if [ $? -eq 0 ] ; then
            line=$(echo $pphrase | zfs load-key "${dataset}" 2>&1)
            if [ $? -ne 0 ] ; then
                if [[ "$line" == *"Keys must be loaded for encryption root of '${dataset}' ("*")."* ]] ; then
                    encroot=${line##*(}
                    encroot=${encroot%%).*}
                    if ! echo $pphrase | zfs load-key "${encroot}" ; then
                        warn "ZFS: Unable to load key for dataset encryption root '${encroot}'"
                        return 1
                    fi
                else
                    echo $line >&2
                    warn "ZFS: Unable to load key for dataset '${dataset}'"
                    return 1
                fi
            fi
        fi
    fi

    # We need zfsutil for non-legacy mounts and not for legacy mounts.
    if [ "${mountpoint}" = "legacy" ] ; then
        mount -t zfs "${dataset}" "${NEWROOT}"
    else
        mount -o zfsutil -t zfs "${dataset}" "${NEWROOT}"
    fi

    return $?
}

# export_all OPTS
#   exports all imported zfs pools.
export_all() {
        opts="${@}"
    ret=0

    IFS="${NEWLINE}"
    for pool in $(zpool list -H -o name) ; do
        if zpool list -H "${pool}" > /dev/null 2>&1; then
            zpool export "${pool}" ${opts} || ret=$?
        fi
    done
    IFS="${OLDIFS}"

    return ${ret}
}
